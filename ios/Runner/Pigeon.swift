// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct Data {
  var someText: String? = nil
  var otherText: String? = nil

  static func fromMap(_ map: [String: Any?]) -> Data? {
    let someText = map["someText"] as? String 
    let otherText = map["otherText"] as? String 

    return Data(
      someText: someText,
      otherText: otherText
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "someText": someText,
      "otherText": otherText
    ]
  }
}
private class DataApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Data.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class DataApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Data {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class DataApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DataApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DataApiCodecWriter(data: data)
  }
}

class DataApiCodec: FlutterStandardMessageCodec {
  static let shared = DataApiCodec(readerWriter: DataApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DataApi {
  func search(keyword: String) -> [Data?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DataApiSetup {
  /// The codec used by DataApi.
  static var codec: FlutterStandardMessageCodec { DataApiCodec.shared }
  /// Sets up an instance of `DataApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DataApi?) {
    let searchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.DataApi.search", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      searchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keywordArg = args[0] as! String
        let result = api.search(keyword: keywordArg)
        reply(wrapResult(result))
      }
    } else {
      searchChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
