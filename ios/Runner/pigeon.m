// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface Data ()
+ (Data *)fromMap:(NSDictionary *)dict;
+ (nullable Data *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Data
+ (instancetype)makeWithSomeText:(nullable NSString *)someText
    otherText:(nullable NSString *)otherText {
  Data* pigeonResult = [[Data alloc] init];
  pigeonResult.someText = someText;
  pigeonResult.otherText = otherText;
  return pigeonResult;
}
+ (Data *)fromMap:(NSDictionary *)dict {
  Data *pigeonResult = [[Data alloc] init];
  pigeonResult.someText = GetNullableObject(dict, @"someText");
  pigeonResult.otherText = GetNullableObject(dict, @"otherText");
  return pigeonResult;
}
+ (nullable Data *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [Data fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"someText" : (self.someText ?: [NSNull null]),
    @"otherText" : (self.otherText ?: [NSNull null]),
  };
}
@end

@interface DataApiCodecReader : FlutterStandardReader
@end
@implementation DataApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [Data fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface DataApiCodecWriter : FlutterStandardWriter
@end
@implementation DataApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[Data class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface DataApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DataApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DataApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DataApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DataApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    DataApiCodecReaderWriter *readerWriter = [[DataApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void DataApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DataApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DataApi.search"
        binaryMessenger:binaryMessenger
        codec:DataApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchKeyword:error:)], @"DataApi api (%@) doesn't respond to @selector(searchKeyword:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyword = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Data *> *output = [api searchKeyword:arg_keyword error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
